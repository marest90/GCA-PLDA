#!/bin/bash -e

export PYTHONPATH=../../:$PYTHONPATH
scripts=../scripts

# Defaults
#train_set=vox_dev
dev_set="voxceleb2_4ch_16sec"
#arch_name=dplda
#arch_config=configs/arch/$arch_name.ini
#seed=0
#device=0
#root_dir=output/voxaccent_bal2-s$seed/$arch_name
root_dir=output/voxceleb2_dev
plda_dir=../../DCA-PLDA/examples/speaker_verification
n_tar=5000
n_non=20000
n_pca=10

#while getopts "t:d:o:a:s:D:" flag; do
#    case ${flag} in
#	t ) train_set=$OPTARG;;
#	d ) dev_sets=$OPTARG;;
#	o ) root_dir=$OPTARG;;
#	a ) arch_config=$OPTARG;;
#	s ) seed=$OPTARG;;
#	D ) device=$OPTARG;;
#	\? ) echo "Invalid option -$OPTARG"; exit 1;;
 #   esac
#done


###### Location of inputs

data_dir=$plda_dir/data
#train_dir=./data
#trn_emb=$train_dir/train/embeddings_dev.h5
#trn_meta=$train_dir/train/metadata_$train_set
#ini_meta=$train_dir/train/metadata_${train_set}
#train_config1=configs/train/stage1.ini
#train_config2=configs/train/stage2.ini

###### Training in two stages

#train_flags="--restart --seed $seed"
#if [ $device != 'CPU' ]; then
#    train_flags="$train_flags --cuda"
#    export CUDA_VISIBLE_DEVICES=$device
#else
#    export CUDA_VISIBLE_DEVICES=""
#fi

out_dir=$root_dir
mkdir -p $out_dir/models
data_table=$out_dir/models/data_table.h5


dev_emb=$data_dir/eval/$dev_set/embeddings_test.h5
dev_key=$data_dir/eval/$dev_set/keys/key_total.h5
dev_scr=$plda_dir/output/voxaccent-s4/dplda/stage1/eval_best/voxceleb2_4ch_16sec/scores.h5


date=`date +%Y.%m.%d.%H.%M`

if [ ! -f $out_dir/models/DONE ]; then
    echo "Starting stage1 in $out_dir/models"
    echo "Log file: $out_dir/models/log.$date"
    python3 -u $scripts/train.py --trn_embeddings $dev_emb --trn_key $dev_key --trn_scores $dev_scr --out_dir $data_table --n_tar $n_tar --n_non $n_non --n_pca $n_pca > $out_dir/models/log.$date
    #python3 -u $scripts/train.py $train_flags --configs $train_config1,$train_config2,$arch_config --init_subset $ini_meta $trn_emb $trn_meta $dev_table $out_dir/stage1/models > $out_dir/stage1/models/log.$date
fi

#if [ ! -f $out_dir/stage2/models/DONE ] && [ $train_config2 != "" ]; then
#    echo "Starting stage1 in $out_dir/stage2/models"
#    echo "Log file: $out_dir/stage2/models/log.$date"
    # Copy the last model from stage1 in the outdir for stage2. Since we set --restart, the training script will look for
    # existing models and load it up.
#    last_model_from_first_stage=`ls $out_dir/stage1/models/last_*`
#    dev_loss=`echo $last_model_from_first_stage | sed -e 's,.*devloss_,,' -e 's,_.*,,' -e 's,\.pth,,'`
#    mkdir -p $out_dir/stage2/models
#    cp $last_model_from_first_stage $out_dir/stage2/models/model_epoch_0000_devloss_$dev_loss.pth
#    python3 -u $scripts/train.py $train_flags --configs $train_config1,$train_config2,$arch_config $trn_emb #$trn_meta $dev_table $out_dir/stage2/models > $out_dir/stage2/models/log.$date
#fi

# Evaluation
#
#for stage in stage1 stage2; do
#
#    # Evaluate the first and the best model in each stage
#    best_model=`ls $out_dir/$stage/models/best*.pth`
#    first_model=`ls $out_dir/$stage/models/first*.pth`
#
#    for model in $best_model $first_model; do
#
#	mname=`echo $model | sed -e 's,.*epoch_,ep,' -e 's,_.*,,'`
#	dir=$out_dir/$stage/eval_$mname
#	
#	for evalset in voxceleb2_4-16sec; do #voxceleb2_4ch_4sec voxaccent_v2_4ch_4sec voxceleb2_4ch_8sec voxaccent_v2_4ch_8sec voxceleb2_4ch_16sec voxaccent_v2_4ch_16sec; do
#
#	    emb=$data_dir/eval/$evalset/embeddings_test.h5
#	    keys=$data_dir/eval/$evalset/key.lst
#	    emap=$data_dir/eval/$evalset/enroll.lst
#	    tmap=$data_dir/eval/$evalset/test.lst
#	    durs=$data_dir/eval/$evalset/durations
#	
#	    eval_dir=$dir/$evalset
#	    mkdir -p $eval_dir
#	    
#	    if [ ! -f $eval_dir/results2 ]; then
#		echo "#######################################################################"
#		echo "Testing $evalset with model $model"
#		# All wavs with less than 2seconds of speech are discarded from scoring. Their score
#		# will be considered 0 when computing the performance.
#		gawk '$2>2' $durs > $eval_dir/durations
#		python3 $scripts/eval.py --ptar 0.01 --durs $eval_dir/durations --keylist $keys --min_dur 2 --set $evalset $model $emb $emap $tmap $eval_dir 
#	    fi
#	done
#
#	if [ $model == $best_model ]; then
#	    ln -fs eval_$mname $out_dir/$stage/eval_best
#	fi
#
#	cat $dir/*/results | head -2 > $dir/all_results0.01
#	cat $dir/*/results | sort | fgrep ":" >> $dir/all_results0.01
#
#    done
#
#done
#
# Delete all models except the first, best and last, which are saved in a copy with specific names
#find $out_dir/ -name "model_epoch*" | xargs rm -f
#find $out_dir/ -name "scores.h5" | xargs rm -f
#
